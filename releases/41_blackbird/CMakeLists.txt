# == DO NOT EDIT THE FOLLOWING LINES for the Raspberry Pi Pico VS Code Extension to work ==
if(WIN32)
    set(USERHOME $ENV{USERPROFILE})
else()
    set(USERHOME $ENV{HOME})
endif()
set(sdkVersion 2.1.1)
set(toolchainVersion 14_2_Rel1)
set(picotoolVersion 2.1.1)
set(picoVscode ${USERHOME}/.pico-sdk/cmake/pico-vscode.cmake)
if (EXISTS ${picoVscode})
    include(${picoVscode})
endif()
# ====================================================================================
set(PICO_BOARD pico CACHE STRING "Board type")

cmake_minimum_required (VERSION 3.13)
include(pico_sdk_import.cmake)
# Define a variable for the card name
set(CARD_NAME blackbird)
# type matching project name here
project(blackbird C CXX ASM)
set(CMAKE_CXX_STANDARD 17)
pico_sdk_init()

macro (add_card _name)
    add_executable(${ARGV})
    if (TARGET ${_name})
      target_include_directories(${_name} PUBLIC ${CMAKE_CURRENT_LIST_DIR})
      target_link_libraries(${_name} pico_unique_id pico_stdlib pico_multicore hardware_dma hardware_i2c hardware_pwm hardware_adc hardware_spi hardware_flash lua tinyusb_device tinyusb_board)
      pico_add_extra_outputs(${_name})
      target_sources(${_name} PUBLIC 
        ${CMAKE_CURRENT_LIST_DIR}/main.cpp
        ${CMAKE_CURRENT_LIST_DIR}/usb_descriptors.c
        ${CMAKE_CURRENT_LIST_DIR}/lib/casl.c
        ${CMAKE_CURRENT_LIST_DIR}/lib/slopes.c
        ${CMAKE_CURRENT_LIST_DIR}/lib/ashapes.c
        ${CMAKE_CURRENT_LIST_DIR}/lib/detect.c
        ${CMAKE_CURRENT_LIST_DIR}/lib/caw.c
        ${CMAKE_CURRENT_LIST_DIR}/lib/metro.c
        ${CMAKE_CURRENT_LIST_DIR}/lib/clock.c
        ${CMAKE_CURRENT_LIST_DIR}/lib/clock_ll.c
        ${CMAKE_CURRENT_LIST_DIR}/lib/events.c
        ${CMAKE_CURRENT_LIST_DIR}/lib/events_lockfree.c
        ${CMAKE_CURRENT_LIST_DIR}/lib/l_bootstrap.c
        ${CMAKE_CURRENT_LIST_DIR}/lib/l_crowlib.c
        ${CMAKE_CURRENT_LIST_DIR}/lib/ll_timers.c
        ${CMAKE_CURRENT_LIST_DIR}/lib/random.c
        ${CMAKE_CURRENT_LIST_DIR}/lib/wrblocks.c
        ${CMAKE_CURRENT_LIST_DIR}/lib/flash_storage.cpp
      )
      target_compile_definitions(${_name} PRIVATE PICO_XOSC_STARTUP_DELAY_MULTIPLIER=64)
      # Disable stdio USB - we're using TinyUSB directly with custom descriptors for druid compatibility
      pico_enable_stdio_usb(${_name} 0)
      pico_enable_stdio_uart(${_name} 0)
    endif()
  endmacro()

# Add Lua library
add_subdirectory(lua/src)

# Build host luac before compiling Lua files to bytecode
add_custom_command(
    OUTPUT ${CMAKE_BINARY_DIR}/host_luac/luac
    COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/util/build_host_luac.sh
    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/luac.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/lapi.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/lauxlib.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/lbaselib.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/lcode.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/lcorolib.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/lctype.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/ldblib.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/ldebug.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/ldo.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/ldump.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/lfunc.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/lgc.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/linit.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/liolib.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/llex.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/lmathlib.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/lmem.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/loadlib.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/lobject.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/lopcodes.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/loslib.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/lparser.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/lstate.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/lstring.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/lstrlib.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/ltable.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/ltablib.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/ltm.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/lundump.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/lutf8lib.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/lvm.c
            ${CMAKE_CURRENT_SOURCE_DIR}/lua/src/lzio.c
            ${CMAKE_CURRENT_SOURCE_DIR}/util/build_host_luac.sh
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    COMMENT "Building host luac for Lua bytecode compilation"
)

add_custom_target(build_host_luac DEPENDS ${CMAKE_BINARY_DIR}/host_luac/luac)

# Function to add Lua-to-header conversion
function(add_lua_header LUA_FILE HEADER_VAR)
    get_filename_component(LUA_NAME ${LUA_FILE} NAME_WE)
    set(HEADER_FILE ${CMAKE_BINARY_DIR}/${LUA_NAME}.h)
    
    add_custom_command(
        OUTPUT ${HEADER_FILE}
        COMMAND python3 ${CMAKE_CURRENT_SOURCE_DIR}/util/lua2header.py 
                ${CMAKE_CURRENT_SOURCE_DIR}/${LUA_FILE} 
                ${HEADER_FILE}
        DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/${LUA_FILE} build_host_luac
        COMMENT "Converting ${LUA_FILE} to C header (bytecode or source fallback)"
    )
    
    set(${HEADER_VAR} ${HEADER_FILE} PARENT_SCOPE)
endfunction()

# Debug build options for conditional test script embedding
option(ENABLE_DEBUG_TESTS "Enable embedded debug test scripts" OFF)
set(DEBUG_TEST_SCRIPT "" CACHE STRING "Single test script to embed (e.g., test_simple_output)")

# Generate headers for core Lua libraries (always included)
add_lua_header(lib/lua/asl.lua ASL_HEADER)
add_lua_header(lib/lua/asllib.lua ASLLIB_HEADER)
add_lua_header(lib/lua/crowlib.lua CROWLIB_HEADER)
add_lua_header(lib/lua/clock.lua CLOCK_HEADER)
add_lua_header(lib/lua/metro.lua METRO_HEADER)
add_lua_header(lib/lua/public.lua PUBLIC_HEADER)
add_lua_header(lib/lua/input.lua INPUT_HEADER)
add_lua_header(lib/lua/output.lua OUTPUT_HEADER)
add_lua_header(lib/lua/sequins.lua SEQUINS_HEADER)
add_lua_header(lib/lua/quote.lua QUOTE_HEADER)
add_lua_header(lib/lua/timeline.lua TIMELINE_HEADER)
add_lua_header(lib/lua/hotswap.lua HOTSWAP_HEADER)
add_lua_header(lib/lua/First.lua FIRST_HEADER)

# Conditional test script generation
set(TEST_HEADERS "")
if(ENABLE_DEBUG_TESTS)
    if(DEBUG_TEST_SCRIPT)
        # Single test mode
        message(STATUS "Blackbird: Embedding single test script: ${DEBUG_TEST_SCRIPT}.lua")
        add_lua_header(${DEBUG_TEST_SCRIPT}.lua SINGLE_TEST_HEADER)
        list(APPEND TEST_HEADERS ${SINGLE_TEST_HEADER})
        # Define which test is embedded for conditional compilation
        string(TOUPPER ${DEBUG_TEST_SCRIPT} TEST_SCRIPT_UPPER)
        set(TEST_DEFINE "EMBED_${TEST_SCRIPT_UPPER}")
    else()
        # All tests mode (original behavior for full debugging)
        message(STATUS "Blackbird: Embedding ALL test scripts (full debug mode)")
        add_lua_header(test_enhanced_multicore_safety.lua TEST_ENHANCED_MULTICORE_SAFETY_HEADER)
        add_lua_header(test_lockfree_performance.lua TEST_LOCKFREE_PERFORMANCE_HEADER)
        add_lua_header(test_random_voltage.lua TEST_RANDOM_VOLTAGE_HEADER)
        add_lua_header(test_phase2_performance.lua TEST_PHASE2_PERFORMANCE_HEADER)
        add_lua_header(test_simple_output.lua TEST_SIMPLE_OUTPUT_HEADER)
        list(APPEND TEST_HEADERS 
          
        )
        set(TEST_DEFINE "EMBED_ALL_TESTS")
    endif()
else()
    message(STATUS "Blackbird: Production build - no test scripts embedded")
    set(TEST_DEFINE "PRODUCTION_BUILD")
endif()

# Create card
add_card(${CARD_NAME})

# Add generated headers as dependencies
target_sources(${CARD_NAME} PRIVATE 
  ${ASL_HEADER}
  ${ASLLIB_HEADER}
  ${CROWLIB_HEADER}
  ${CLOCK_HEADER}
  ${METRO_HEADER}
  ${PUBLIC_HEADER}
  ${INPUT_HEADER}
  ${OUTPUT_HEADER}
  ${II_HEADER}
  ${CALIBRATE_HEADER}
  ${SEQUINS_HEADER}
  ${QUOTE_HEADER}
  ${TIMELINE_HEADER}
  ${HOTSWAP_HEADER}
  ${FIRST_HEADER}
  ${TEST_HEADERS}  # Conditionally populated test headers
)

# Add conditional compilation defines
target_compile_definitions(${CARD_NAME} PRIVATE ${TEST_DEFINE})
target_include_directories(${CARD_NAME} PRIVATE ${CMAKE_BINARY_DIR})


# Copy UF2 files to UF2 directory with descriptive names
add_custom_command(
    TARGET ${CARD_NAME}
    POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_CURRENT_SOURCE_DIR}/UF2
    COMMAND ${CMAKE_COMMAND} -E copy
            ${CMAKE_CURRENT_BINARY_DIR}/${CARD_NAME}.uf2
            ${CMAKE_CURRENT_SOURCE_DIR}/UF2/${CARD_NAME}.uf2
)
